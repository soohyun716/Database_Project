package 공강;

//Import required packages
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Vector;

/*
* 데이터베이스 수정 및 관리 위한 코드 
* 
* [투플 값 관리] 추가/수정/삭제 선택 
* -> 5가지 테이블 중 관리할 테이블 선택
* 추가 -> 데이터 입력받기 
* 수정 -> 변경할 데이터 선택 
* 삭제 -> 삭제할 데이터 선택
* 
*/

public class DB2024 { // 메인 실행 함수
	public static void main(String[] args) {
		new 관리자();
	}
}

class 관리자 extends JFrame implements ActionListener, MouseListener {

	public JLabel result = new JLabel();
	public JTextField inputField = new JTextField(30); // 사용자 입력을 받기 위한 텍스트 필드 추가

	public JLabel result_wh = new JLabel();
	public JTextField inputWhere = new JTextField(30); // 사용자 입력을 받기 위한 텍스트 필드 추가

	JButton menu1_back = new JButton("뒤로가기");
	JButton input_back = new JButton("뒤로가기");
	
	JTable table;

	final int X = 200;
	final int Y = 50; // Next = Y * n
	final int Y_gap = 40;

	// input Start Point
	final int XE = 50; // label Posision
	final int XE2 = 400; // input Field
	final int YE = 50; // Next = YE * n
	final int YE_gap = 40;

	Container ct = getContentPane(); // 컨테이너 객체 생성
	JScrollPane scrollPane = null;
	// JDBC driver name and database URL
	static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
	static final String DB_URL = "jdbc:mysql://localhost/DB_2024";
	// Database credentials
	// MySQL 계정과 암호 입력
	static final String USER = "root";
	static final String PASS = "rootroot";

	private String tableName;

	String command1 = null;
	String command2 = null;

	TextField idField, passField;
	Button submitButton;

	public Connection conn;
	public Statement stmt;

	public void DatabaseManager() {
		try {
			conn = DriverManager.getConnection(DB_URL, USER, PASS);
			stmt = conn.createStatement();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public 관리자() {
		password();
	}

	public void password() {

		// ct.setLayout(new FlowLayout(FlowLayout.CENTER,0,100)); // 배치관리자 설정
		// ct.setLayout(new GridLayout(3,1));
		// ct.setLayout(new BorderLayout());
		ct.setLayout(null);

		Panel p1 = new Panel();
		Label idLabel = new Label(String.format("%20s :", "LOGIN ID"));
		p1.add(idLabel);
		idField = new TextField(20);
		p1.add(idField);

		Panel p2 = new Panel();
		Label passLabel = new Label(String.format("%20s:", "PASSWORD"));
		p2.add(passLabel);

		passField = new TextField(20);
		passField.setEchoChar('*'); /* 비밀번호 입력 시 '*'로 표시 */
		p2.add(passField);

		submitButton = new Button("ENTER");
		submitButton.addActionListener(this);

		submitButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (e.getSource() == submitButton) {
					String id = idField.getText();
					String password = passField.getText();

					System.out.println("ID: " + id);
					System.out.println("Password: " + password);

					if (id.equals(USER) && password.equals(PASS)) {
						DatabaseManager();						
						menu1(); // pass
					}
				}
			}
		});

		Panel p3 = new Panel();
		p3.add(submitButton);

		p1.setBounds(X, Y * 1, 500, Y_gap); // x, y , Width, Height
		p2.setBounds(X, Y * 2, 500, Y_gap);
		p3.setBounds(X, Y * 3, 500, Y_gap);

		ct.add(p1, FlowLayout.LEFT);
		ct.add(p2, FlowLayout.LEFT);
		ct.add(p3, FlowLayout.LEFT);

		setTitle("ID Password Input");
		setSize(1024, 768);
		setVisible(true);
	}

	public void menu1() {  // re-enterable : 중복실행 가능

		ct.removeAll();
		// revalidate();
		repaint();

		// 컨테이너 생성 후 컴포넌트를 추가
		// ct.setLayout(new FlowLayout()); // 배치관리자 설정

		JButton jb_insert = new JButton("투플추가");
		jb_insert.addActionListener(this);
		ct.add(jb_insert);

		JButton jb_modify = new JButton("투플수정");
		jb_modify.addActionListener(this);
		ct.add(jb_modify);

		JButton jb_delete = new JButton("투플삭제");
		jb_delete.addActionListener(this);
		ct.add(jb_delete);

		JButton jb_start = new JButton("관리시작");
		jb_start.addActionListener(this);
		ct.add(jb_start);

		JButton jb_commit = new JButton("관리완료");
		jb_commit.addActionListener(this);
		ct.add(jb_commit);

		JButton jb_rollback = new JButton("되돌리기");
		jb_rollback.addActionListener(this);
		ct.add(jb_rollback);

		ct.setLayout(null);
		jb_insert.setBounds(X + 100, Y * 1, 400, Y_gap);
		jb_modify.setBounds(X + 100, Y * 2, 400, Y_gap);
		jb_delete.setBounds(X + 100, Y * 3, 400, Y_gap);
		jb_start.setBounds(X - 100, Y * 5, 200, Y_gap);
		jb_commit.setBounds(X + 200, Y * 5, 200, Y_gap);
		jb_rollback.setBounds(X + 500, Y * 5, 200, Y_gap);

		setTitle("관리자");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 프레임을 닫을 때 프로그램이 종료
		setVisible(true);
	}

	public void addCommonComponents() {  // re-enterable : 중복실행 가능
		ct.removeAll();
		// revalidate();
		repaint();

		// 공통으로 사용할 컴포넌트를 추가하는 메서드
		// ct.setLayout(new FlowLayout());
		ct.setLayout(null);

		JButton jb1 = new JButton("Space_Info");
		jb1.addActionListener(this);
		ct.add(jb1);

		JButton jb2 = new JButton("Classroom");
		jb2.addActionListener(this);
		ct.add(jb2);

		JButton jb3 = new JButton("Classroom_External");
		jb3.addActionListener(this);
		ct.add(jb3);

		JButton jb4 = new JButton("Professor");
		jb4.addActionListener(this);
		ct.add(jb4);

		JButton jb5 = new JButton("Lecture");
		jb5.addActionListener(this);
		ct.add(jb5);

		menu1_back.addActionListener(this);
		ct.add(menu1_back);

		ct.setLayout(null);
		jb1.setBounds(X + 100, Y * 1, 400, Y_gap);
		jb2.setBounds(X + 100, Y * 2, 400, Y_gap);
		jb3.setBounds(X + 100, Y * 3, 400, Y_gap);
		jb4.setBounds(X + 100, Y * 4, 400, Y_gap);
		jb5.setBounds(X + 100, Y * 5, 400, Y_gap);
		menu1_back.setBounds(X + 100, Y * 7, 400, Y_gap);

		setTitle("튜플선택");
		setVisible(true);
	}

	// ActionEvent 클래스와 ActionListener 리스너 인터페이스를 사용해서 버튼 누르는 이벤트를 처리
	@Override
	public void actionPerformed(ActionEvent e) {

		String command = e.getActionCommand();
		switch (command) {
		case "투플추가":
		case "투플수정":
		case "투플삭제":
			command1 = command;
			addCommonComponents();
			break;

		case "관리시작":
			try {		
				conn.setAutoCommit(false);
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			
			break;
			
		case "관리완료":
			try {
				conn.commit(); // transaction succeed
				conn.setAutoCommit(true);
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			break;
			
		case "되돌리기":
			
			try {
				conn.rollback();
				conn.setAutoCommit(true);
			} catch (SQLException e1) {
				e1.printStackTrace();
			}

			break;

		case "뒤로가기":
			if (e.getSource() == menu1_back)
				menu1();
			else if (e.getSource() == input_back)
				addCommonComponents();
			break;

		case "Space_Info":
		case "Classroom":
		case "Classroom_External":
		case "Professor":
		case "Lecture":
			command2 = command;
			tableName = getTableName(command);
			try {
				showInputField();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			break;
		}
	}



	private void showInputField() throws SQLException {
		ct.removeAll();

		run_prog(command1, tableName);

		input_back.setBounds(XE2 + 100, YE * 3, 100, YE_gap);
		input_back.addActionListener(this);
		ct.add(input_back);

		결과보기(tableName); // select *

		revalidate();
		repaint();
	}

	public void run_prog(String command1, String tableName) throws SQLException {
		
		if (command1.equals("투플추가")) {
			// 투플 추가 로직 실행
			insertTuple(tableName);
		} else if (command1.equals("투플수정")) {
			// 투플 수정 로직 실행
			updateTuple(tableName);
		} else if (command1.equals("투플삭제")) {
			// 투플 삭제 로직 실행
			deleteTuple(tableName);
		}
	}

	private void insertTuple(String tableName) throws SQLException {
		// 기존 컴포넌트 초기화

		ct.setLayout(null);
		// 결과 텍스트를 선언 및 초기화
		inputField.setText(""); // 입력 필드 초기화		
		result.setText("INSERT INTO " + tableName + " VALUES : ");

		// 결과 텍스트와 입력 필드를 컨테이너에 추가
		ct.add(result);
		ct.add(inputField);

		JButton confirmButton = new JButton("확인");
		confirmButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				try {

					String tupleInfo = inputField.getText();

					if (tupleInfo.length() != 0) {
						inputField.setText(""); // 입력 필드 초기화
						String query = "INSERT INTO " + tableName + " VALUES (" + tupleInfo + ")";
						System.out.println(query); // 디버깅을 위해 출력

						// 쿼리 실행
						stmt.executeUpdate(query);
						
						// 결과를 다시 보여주기 위해 결과보기 메서드 호출
						결과보기(tableName);
					}

				} catch (SQLException se) {
					se.printStackTrace();
				}
			}
		});

		ct.add(confirmButton);

		result.setBounds(XE, YE * 2, 400, YE_gap);
		inputField.setBounds(XE2, YE * 2, 500, YE_gap);
		confirmButton.setBounds(XE2, YE * 3, 100, YE_gap);

		setTitle("튜플추가");
		// 컨테이너 변경사항 적용 및 화면 다시 그리기
		ct.revalidate();
		ct.repaint();
	}

	private void updateTuple(String tableName) throws SQLException {
		// 기존 컴포넌트 초기화
		// see, https://blog.naver.com/PostView.nhn?blogId=javaking75&logNo=140157948347

		ct.setLayout(null);
		inputWhere.setText(""); // 입력 필드 초기화
		inputField.setText(""); // 입력 필드 초기화

		// where condition
		result_wh.setText("UPDATE " + tableName + " WHERE Condition:");
		ct.add(result_wh);
		ct.add(inputWhere);

		// update data
		result.setText("UPDATE " + tableName + " SET Values  : ");
		ct.add(result);
		ct.add(inputField);

		JButton confirmButton = new JButton("확인");
		confirmButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {

				try (
					Statement stmt = conn.createStatement()) {

					String condition_txt = inputWhere.getText();
					String tupleInfo = inputField.getText();

					if (condition_txt.length() != 0 && tupleInfo.length() != 0) {
						String query = "UPDATE " + tableName + " SET " + tupleInfo + " WHERE " + condition_txt;
						System.out.println(query); // 디버깅을 위해 출력
						
						stmt.executeUpdate(query);

						// 결과를 다시 보여주기 위해 결과보기 메서드 호출
						결과보기(tableName);
					} else {
						System.out.println(tupleInfo); // 디버깅을 위해 출력
						System.out.println(condition_txt); // 디버깅을 위해 출력
					}

				} catch (SQLException se) {
					se.printStackTrace();
				}
			}
		});

		ct.add(confirmButton);

		result.setBounds(XE, YE * 1, 400, YE_gap);
		inputField.setBounds(XE2, YE * 1, 500, YE_gap);

		result_wh.setBounds(XE, YE * 2, 400, YE_gap);
		inputWhere.setBounds(XE2, YE * 2, 500, YE_gap);

		confirmButton.setBounds(XE2, YE * 3, 100, YE_gap);

		setTitle("튜플수정");
		// 컨테이너 변경사항 적용 및 화면 다시 그리기
		ct.revalidate();
		ct.repaint();
	}

	private void deleteTuple(String tableName) throws SQLException {
		// 기존 컴포넌트 초기화
		// ct.removeAll();

		ct.setLayout(null);
		inputField.setText(""); // 입력 필드 초기화		
		
		// 결과 텍스트를 선언 및 초기화
		result.setText("DELETE " + tableName + " WHERE Condition: ");

		// 결과 텍스트와 입력 필드를 컨테이너에 추가
		ct.add(result);
		ct.add(inputField);

		JButton confirmButton = new JButton("확인");
		confirmButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				try (
						Statement stmt = conn.createStatement()) {

					String tupleInfo = inputField.getText();
					if (tupleInfo.length() != 0) {
						inputField.setText(""); // 입력 필드 초기화
						String query = "DELETE FROM " + tableName + " WHERE " + tupleInfo;
						System.out.println(query); // 디버깅을 위해 출력

						// 쿼리 실행
						stmt.executeUpdate(query);

						// 결과를 다시 보여주기 위해 결과보기 메서드 호출
						결과보기(tableName);
					}

				} catch (SQLException se) {
					se.printStackTrace();
				}
			}
		});
		ct.add(confirmButton);

		result.setBounds(XE, YE * 2, 400, YE_gap);
		inputField.setBounds(XE2, YE * 2, 500, YE_gap);
		confirmButton.setBounds(XE2, YE * 3, 100, YE_gap);

		setTitle("튜플삭제");
		// 컨테이너 변경사항 적용 및 화면 다시 그리기
		ct.revalidate();
		ct.repaint();
	}

	private String getTableName(String command2) {
		// 버튼에 따른 테이블 이름을 반환하는 메서드
		switch (command2) {
		case "Space_Info":
			return "DB2024_Space_Info";
		case "Classroom":
			return "DB2024_Classroom";
		case "Classroom_External":
			return "DB2024_Classroom_External";
		case "Professor":
			return "DB2024_Professor";
		case "Lecture":
			return "DB2024_Lecture";
		default:
			return null;
		}
	}

	public void 결과보기(String tableName) throws SQLException {
		
		String query2 = "SELECT * FROM " + tableName;
		System.out.println(query2); // 디버깅을 위해 출력

		DefaultTableModel tableModel = new DefaultTableModel();

		try (
				Statement stmt1 = conn.createStatement();
				ResultSet rs = stmt1.executeQuery(query2)) {
			
			// Get column names from ResultSet metadata
			ResultSetMetaData metaData = rs.getMetaData();
			int columnCount = metaData.getColumnCount();
			Vector<String> columnNames = new Vector<>();

			for (int column = 1; column <= columnCount; column++) {
				columnNames.add(metaData.getColumnName(column));
			}

			// Add column names to table model
			tableModel.setColumnIdentifiers(columnNames);

			// Get row data from ResultSet
			while (rs.next()) {
				Vector<Object> rowData = new Vector<>();
				for (int column = 1; column <= columnCount; column++) {
					rowData.add(rs.getObject(column));
				}
				tableModel.addRow(rowData);
			}

		} catch (SQLException se) {
			se.printStackTrace();
		}

		// Create JTable with the table model
		JTable table = new JTable(tableModel);
		this.table = table;
		
		scrollPane = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

		scrollPane.setAutoscrolls(true);

		Dimension size = ct.getSize();
		System.out.println("W:" + size.width + " H:" + size.height); // 디버깅을 위해 출력
		scrollPane.setBounds(10, 200, size.width - 20, size.height - 200);

		scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scrollPane.setAutoscrolls(true);

		// resize event -> resize ScrollPane
		ct.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) {

				// scrollPane.setPreferredSize(new Dimension(size.width-20, size.height - 200));
				if (scrollPane != null) {
					Dimension size = ct.getSize();
					System.out.println("W:" + size.width + " H:" + size.height); // 디버깅을 위해 출력
					scrollPane.setBounds(10, 200, size.width - 20, size.height - 200);
					scrollPane.revalidate();
					scrollPane.repaint();

					ct.revalidate();
					ct.repaint();
				}
			}

		});

		table.addMouseListener(this); /* --> mouseClicked */
		
		ct.add(scrollPane, FlowLayout.CENTER);

		scrollPane.setVisible(true);
		ct.revalidate();
		ct.repaint();
	}
	
	
	 @Override
	 public void mouseClicked(MouseEvent e) {
		 int row = table.getSelectedRow();
		 int col = table.getSelectedColumn();
		 String result="";
		 String sel="";
		 for (int i = 0; i < table.getColumnCount(); i++) {
			 result += table.getColumnName(i) + "=" + table.getModel().getValueAt(row, i);
			 if ( i < (table.getColumnCount()-1)) result += ",";
		 }
		 System.out.println(row + "," + col + ":" + result);
		 

		 // set inputField
		 sel = table.getColumnName(col) + "=" + table.getModel().getValueAt(row, col);
		 switch(command1) {
			case "투플수정":
					if(inputField.getText().length() == 0  ) {
					 	inputField.setText(sel);
				 	}
				 	else {
					 	inputWhere.setText(sel);
				 	}
				 	break;
			case "투플삭제":
			case "투플추가":
					inputField.setText(sel);
					break;
		 }
	  }

	 @Override
	 public void mousePressed(MouseEvent e) {
	  // TODO Auto-generated method stub
	  
	 }

	 @Override
	 public void mouseReleased(MouseEvent e) {
	  // TODO Auto-generated method stub
	  
	 }

	 @Override
	 public void mouseEntered(MouseEvent e) {
	  // TODO Auto-generated method stub
	  
	 }

	 @Override
	 public void mouseExited(MouseEvent e) {
	  // TODO Auto-generated method stub
	  
	 }


} // end main
